/*
 * 创作者：yjulm@hotmail.com
 * 生成时间：2021/6/8 9:52:15
 * CLR版本：4.0.30319.42000
 */

using System;

namespace Deckup
{
    /**********************************************************
     * --------------------------------------------------------
     *              Accept model handshake protocol
     * --------------------------------------------------------
     *   S                                                  C
     * --------------------------------------------------------
     *  0S=> server socket Bind server port
     * --------------------------------------------------------
     *               Create client socket and Bind port 0 <=C0
     * --------------------------------------------------------
     *                      (to server port) SendTo 'Req' <=C1
     * --------------------------------------------------------
     *  1S=> Wait 'Req' (from any address)
     * --------------------------------------------------------
     *  2S=> ReceiveFrom 'Req', Record C port
     * --------------------------------------------------------
     *  3S=> Create accept socket and Bind port 0 (AS)
     * --------------------------------------------------------
     *  4S=> S SendTo 'Res', Set AS port (to C port)
     * --------------------------------------------------------
     *                    (select read status) Wait 'Res' <=C2
     * --------------------------------------------------------
     *                 if, ReceiveFrom 'Res', Get AS Port <=C3
     * --------------------------------------------------------
     *                                     Record AS Port <=C4
     * --------------------------------------------------------
     *  5S=> S Wait 'Req' ('Res' lost, C resend 'Req')
     * --------------------------------------------------------
     *  6S=> if, ReceiveFrom 'Req', back to 4S (resend 'Res')
     * --------------------------------------------------------
     *  7S=> else if, check AS notify
     * --------------------------------------------------------
     *  8S=> true, S exit Wait, enter next accept
     * --------------------------------------------------------
     *  9S=> false, back to 4S (resend 'Res')
     * --------------------------------------------------------
     * 10S=> else if, Wait 'Req' retries exceeded, Close AS
     * --------------------------------------------------------
     * 11S=> exit, back to 4S (resend 'Res')
     * --------------------------------------------------------
     *                          (to AS port) SendTo 'Ret' <=C5
     * --------------------------------------------------------
     * 12S=> AS Wait 'Ret'
     * --------------------------------------------------------
     * 13S=> if, ReceiveForm 'Ret', Record C port
     * --------------------------------------------------------
     * 14S=> AS Connect C port, notify S, Send 'End',
     * --------------------------------------------------------
     *       ('Ret' lost, AS resend 'Res') Wait 'End/Res' <=C6
     * --------------------------------------------------------
     *   (resend 'Ret') if, ReceiveForm 'Res', back to C5 <=C7
     * --------------------------------------------------------
     *        else if, ReceiveFrom 'End', Connect AS port <=C8
     * --------------------------------------------------------
     *        else if, Wait 'End' retries exceeded, Close <=C9
     * --------------------------------------------------------
     *              (retry SendTo 'Ret') else, back to C5 <=C10
     * --------------------------------------------------------
     * 15S=> back to 12S ('End' lost, C resend 'Ret')
     * --------------------------------------------------------
     * 16S=> else if, Wait 'Ret' retries exceeded, Close AS
     * --------------------------------------------------------
     * 17S=> else, back to 4S (retry SendTo 'Res')
     * --------------------------------------------------------
     *        else if, Wait 'Res' retries exceeded, Close <=C11
     * --------------------------------------------------------
     *              (retry SendTo 'Req') else, back to C1 <=C12
     * --------------------------------------------------------
     * TIPS: C11 Close, 'Res' unmarked, direct close
     * --------------------------------------------------------
     * TIPS: C9 Close, 'Res' marked, call Close
     * --------------------------------------------------------
     *
     *
     *                     S             C
     *                     |             |
     *                     |           <-|<---retry---+
     *                     |        <-   |            ^
     *                     |     Req     |            |
     *                     |   <-        W            |
     *                     |<-           a            |
     *        +---retry--->+->           i            |
     *        ^            |   ->        t            |
     *        |            |     Res     |            |
     *        |            W        ->   |            |
     *        |            a           ->|            |
     *        |            i             +>--timeout--+>close
     *        |            t           <-|<---retry---+
     *        |            |        <-   |            ^
     *        |            |     Ret     |            |
     *        |            |   <-        W            |
     *        |            |<-           a            |
     *  close<+--timeout--<+             i            |
     *                     |->           t            |
     *                     |   ->        |            |
     *                     |     End     |            |
     *                     |        ->   |            |
     *                     |           ->|            |
     *                     |             +>--timeout--+>close
     *
     * --------------------------------------------------------
     *               Full cone / Restricted cone
     * --------------------------------------------------------
     *
     *
     *
     *
     *                             S         C
     *                             |         |
     *                             |       <-|<--retry--+
     *                             |   Req   W          ^
     *                   A<-create-|<-       a          |
     *        +--retry-->+---------+->       i          |
     *        ^          |         |   Res   t          |
     *        |          |         |       ->+>-timeout-+>close
     *        |          |         |       <-|<--retry--+
     *        |          |         |    <-   |          ^
     *        |          |         | <-      |          |
     *        |          |        Ret        |          |
     *        |          |      <- |         |          |
     *        |          |   <-    |         W          |
     *        |          |<-       |         a          |
     *  close<+-timeout-<+->       |         i          |
     *  |                |   ->    |         t          |
     *  |                |      -> |         |          |
     *  |                |        End        |          |
     *  |                |         | ->      |          |
     *  +>----release--->+-------->+    ->   |          |
     *                   |         |       ->|          |
     *                   |         |         +>-timeout-+>close
     *
     * --------------------------------------------------------
     *             Symmetric / Port restricted cone
     * --------------------------------------------------------
     *
     *
     *
     *
     * --------------------------------------------------------
     *                   Close handshake protocol
     * --------------------------------------------------------
     *   S                                                  C
     * --------------------------------------------------------
     *  0S=> loop Send buffer data, check Shutdown mark
     * --------------------------------------------------------
     *                         (call shutdown) Send 'Req' <=C0
     * --------------------------------------------------------
     *  1S=> Receive 'Req', Record 'Req' mark, (C push over)
     * --------------------------------------------------------
     *  2S=> Send 'Res'
     * --------------------------------------------------------
     *                                         Wait 'Res' <=C1
     * --------------------------------------------------------
     *               if, Receive 'Res', Record 'Res' mark <=C2
     * --------------------------------------------------------
     *  3S=> Send remaining data (if so)
     * --------------------------------------------------------
     *      (Know S status) Receive remaining data, maybe <=C3
     * --------------------------------------------------------
     *  4S=> Send 'Ret', (S push over)
     * --------------------------------------------------------
     *                                         Wait 'Ret' <=C4
     * --------------------------------------------------------
     *               if, Receive 'Ret', Record 'Ret' mark <=C5
     * --------------------------------------------------------
     *                                         Send 'Cfm' <=C6
     * --------------------------------------------------------
     *  5S=> Wait 'Cfm/Req'
     * --------------------------------------------------------
     *  6S=> if, Receive 'Req', Send 'Res' (resend 'Res')
     * --------------------------------------------------------
     *  6S=> if, Receive 'Cfm', Send 'End'
     * --------------------------------------------------------
     *        ('Cfm' lost, S resend 'Ret') Wait 'End/Ret' <=C7
     * --------------------------------------------------------
     *       (resend 'Cfm') if, Receive 'Ret', back to C6 <=C8
     * --------------------------------------------------------
     *               else if, Receive 'End', normal Close <=C9
     * --------------------------------------------------------
     *        else if, Wait 'End' retries exceeded, Close <=C10
     * --------------------------------------------------------
     *                (retry Send 'Cfm') else, back to C6 <=C11
     * --------------------------------------------------------
     *  7S=> normal Close (after select write status)
     * --------------------------------------------------------
     *  8S=> else if, Wait 'Cfm' retries exceeded, Close
     * --------------------------------------------------------
     *  9S=> else, back to 4S (retry Send 'Ret')
     * --------------------------------------------------------
     *        else if, Wait 'Ret' retries exceeded, Close <=C12
     * --------------------------------------------------------
     *                (retry Wait 'Ret') else, back to C4 <=C13
     * --------------------------------------------------------
     *                (retry Send 'Req') else, back to C0 <=C14
     * --------------------------------------------------------
     * TIPS:
     * --------------------------------------------------------
     *
     *                     S             C
     *                     |             |
     *                     |           <-|<---retry---+
     *                     |        <-   |            ^
     *                     |     Req     |      S     |
     *                     |   <-        W      h     |
     *                     |<-           a      u     |
     *        +----Data--->+->           i      t     |
     *        ^            |   ->        t      d     |
     *        |            L [Res/Data]  |      o     |
     *        |            o        ->   |      w     |
     *        |            o           ->|      n     |
     *        |            p             +>--timeout--+
     *        |            |             |<---retry---+
     *        +----Send---<+             |            ^
     *        +--timeout--<+             W            |
     *        ^            |->           a            |
     *        |            |   ->        i            |
     *        |            |     Ret     t            |
     *        |            W        ->   |            |
     *        |            a           ->|            |
     *        |            i             +>--timeout--+>close
     *        |            t           <-|<---retry---+
     *        |            |        <-   |            ^
     *        |            |     Cfm     |            |
     *        |            |   <-        W            |
     *        |            |<-           a            |
     *  close<+--timeout--<+             i            |
     *                     |->           t            |
     *                     |   ->        |            |
     *                     |     End     |            |
     *                     |        ->   |            |
     *                     |           ->|            |
     *                     |             +>--timeout--+>close
     *                     |             |
     *
     *********************************************************/

    [Flags]
    public enum Cmd : ushort
    {
        Err = 0,

        Con = 0x8000,
        Cls = 0x4000,
        Psh = 0x2000,
        Prb = 0x1000,
        Ack = 0x800,
        Aga = 0x400, //try again (receive left - 2)

        Req = 0x10,
        Res = 0x08,
        Ret = 0x04,
        Cfm = 0x02,
        End = 0x01,

        ConReq = Con | Req,
        ConRes = Con | Res,
        ConRet = Con | Ret,
        ConEnd = Con | End,
        ClsReq = Cls | Req,
        ClsRes = Cls | Res,
        ClsRet = Cls | Ret,
        ClsCfm = Cls | Cfm,
        ClsEnd = Cls | End,
        PshAck = Psh | Ack,
        PrbAck = Prb | Ack,
        AckAga = Ack | Aga,
        PshAckAga = Psh | Ack | Aga,
    }
}